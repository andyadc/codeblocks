package com.andyadc.codeblocks.test.crypto;

/*
 * 慢哈希函数（Slow Hash Function）是一种密码学上的哈希函数，它被设计成故意减慢处理速度，以增加破解的难度。
 * 这种函数通常用于密码存储、密钥派生和某些加密算法中，目的是提供额外的安全层，防止暴力破解攻击。
 *
 * 一般来说，慢哈希函数主要有下面一些特点：
 * 1. 计算成本高：故意设计成需要更多计算资源（CPU 时间或内存），使得暴力破解这种方式变得不切实际。
 * 2. 内存密集型：许多慢哈希函数需要大量的内存，这增加了并行处理的难度，因为每个哈希计算实例都需要独立的内存空间。
 * 3. 抵抗暴力破解：由于计算成本高，慢哈希函数使得暴力破解（尝试所有可能的密码直到找到匹配）变得非常困难。
 * 4. 盐值（Salt）：慢哈希函数通常与盐值结合使用，盐值是随机生成的数据，用于与密码组合，确保即使两个用户使用相同的密码，他们的哈希值也会不同。
 * 5. 密钥延展（Key Stretching）：通过多次迭代哈希过程，进一步增加破解难度。
 *
 * 常见的慢哈希函数主要有如下几种，这几种也是我们在 Spring Security 中比较常见的：
 * PBKDF2（Password-Based Key Derivation Function 2）：使用 HMAC 作为伪随机函数，可以配置迭代次数来增加计算时间。
 * BCrypt：专为密码存储设计，包含盐值和多轮哈希计算。
 * scrypt：设计用于加密货币和密码存储，特别强调内存密集型，以抵抗 GPU 和 ASIC 硬件加速的暴力破解。
 * Argon2：是当前最推荐使用的慢哈希函数之一，它赢得了密码哈希竞赛（Password Hashing Competition），并被设计为抵抗各种类型的攻击，包括定制硬件攻击。
 *
 **/
